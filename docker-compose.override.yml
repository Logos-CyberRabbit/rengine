services:
  db:
    restart: always
    image: "postgres:12.3-alpine"
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
    # ports:
    #   - "127.0.0.1:5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    networks:
      - rengine_network

  redis:
    restart: always
    image: "redis:alpine"
    hostname: redis
    networks:
      - rengine_network

  celery:
    build:
      context: ./web
    restart: always
    entrypoint: /usr/src/app/celery-entrypoint.sh
    # command: celery -A reNgine worker --autoscale=${MAX_CONCURRENCY},${MIN_CONCURRENCY} -l INFO
    volumes:
      - web:/usr/src/app
      - github_repos:/usr/src/github
      - wordlist:/usr/src/wordlist
      - scan_results:/usr/src/scan_results
      - gf_patterns:/root/.gf
      - nuclei_templates:/root/nuclei-templates
      - tool_config:/root/.config
      - static_volume:/usr/src/app/staticfiles/
    environment:
      - DEBUG=0
      - CELERY_BROKER=redis://redis:6379/0
      - CELERY_BACKEND=redis://redis:6379/0
      - DOMAIN_NAME=${DOMAIN_NAME}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - MAX_CONCURRENCY=${MAX_CONCURRENCY}
      - MIN_CONCURRENCY=${MIN_CONCURRENCY}
    depends_on:
      - db
      - redis
    networks:
      - rengine_network

  celery-beat:
    build: ./web
    entrypoint: /usr/src/app/beat-entrypoint.sh
    command: celery -A reNgine beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      - CELERY_BROKER=redis://redis:6379/0
      - CELERY_BACKEND=redis://redis:6379/0
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_HOST=${POSTGRES_HOST}
    depends_on:
      - celery
      - db
    volumes:
      - web:/usr/src/app
      - github_repos:/usr/src/github
      - wordlist:/usr/src/wordlist
      - scan_results:/usr/src/scan_results
      - gf_patterns:/root/.gf
      - nuclei_templates:/root/nuclei-templates
      - tool_config:/root/.config
    networks:
      - rengine_network

  web:
    build:
      context: ./web
    entrypoint: /usr/src/app/entrypoint.sh
    restart: always
    image: docker.pkg.github.com/yogeshojha/rengine/rengine:latest
    environment:
      - DEBUG=0
      - CELERY_BROKER=redis://redis:6379/0
      - CELERY_BACKEND=redis://redis:6379/0
      - DOMAIN_NAME=${DOMAIN_NAME}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
    volumes:
      - web:/usr/src/app
      - github_repos:/usr/src/github
      - wordlist:/usr/src/wordlist
      - scan_results:/usr/src/scan_results
      - gf_patterns:/root/.gf
      - nuclei_templates:/root/nuclei-templates
      - tool_config:/root/.config
      - static_volume:/usr/src/app/staticfiles/
    # ports:
    #   - "127.0.0.1:8000:8000"
    depends_on:
      - db
      - celery
      - celery-beat
    networks:
      rengine_network:
        aliases:
          - rengine

  proxy:
    restart: always
    image: nginx:alpine
    # ports:
    #   - 8082:8082/tcp
    #   - 443:443/tcp
    depends_on:
      - web
      - db
      - redis
    secrets:
      - source: proxy.ca
        target: /etc/nginx/certs/rengine_chain.pem
      - source: proxy.cert
        target: /etc/nginx/certs/rengine.pem
      - source: proxy.key
        target: /etc/nginx/certs/rengine_rsa.key
    volumes:
      - ${NGINX_CONF_PATH}:/etc/nginx/conf.d/rengine.conf:ro
      - static_volume:/usr/src/app/staticfiles/
      - scan_results:/usr/src/scan_results
    networks:
      - rengine_network
      - reverse_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=reverse_proxy"

      - "traefik.http.routers.rengine.rule=Host(`rengine.cyberrabbit.it`)"
      - "traefik.http.routers.rengine.service=rengine"
      - "traefik.http.routers.rengine.entrypoints=tls"
      - "traefik.http.routers.rengine.tls=true"

      - "traefik.http.routers.rengine.middlewares=compresstraefik,rengine-securityheaders"

      - "traefik.http.services.rengine.loadbalancer.server.scheme=https"
      - "traefik.http.services.rengine.loadbalancer.server.port=443"
      - "traefik.http.services.rengine.loadbalancer.passhostheader=true"

      - "traefik.http.middlewares.rengine-securityheaders.headers.stsSeconds=15552000"
      - "traefik.http.middlewares.rengine-securityheaders.headers.stsIncludeSubdomains=true"
      - "traefik.http.middlewares.rengine-securityheaders.headers.stsPreload=true"
      - "traefik.http.middlewares.compresstraefik.compress=true"

  ollama:
    image: ollama/ollama
    container_name: ollama
    volumes:
      - ollama_data:/root/.ollama
    # ports:
    #   - "11434:11434"
    networks:
      - rengine_network

networks:
  rengine_network:
  reverse_proxy:
    name: reverse_proxy
    external: true

volumes:
  web:
    driver: local
    driver_opts:
      type: none
      device: ${WEB_PATH}
      o: bind
  tool_config:
    driver: local
    driver_opts:
      type: none
      device: ${TOOL_CONFIG_PATH}
      o: bind
  postgres_data:
    driver: local
    driver_opts:
      type: none
      device: ${POSTGRESS_PATH}
      o: bind
  gf_patterns:
    driver: local
    driver_opts:
      type: none
      device: ${GF_PATH}
      o: bind
  nuclei_templates:
    driver: local
    driver_opts:
      type: none
      device: ${NUCLEI_PATH}
      o: bind
  github_repos:
    driver: local
    driver_opts:
      type: none
      device: ${GITHUB_PATH}
      o: bind
  wordlist:
    driver: local
    driver_opts:
      type: none
      device: ${WORDLIST_PATH}
      o: bind
  scan_results:
    driver: local
    driver_opts:
      type: none
      device: ${SCAN_RESULTS_PATH}
      o: bind
  static_volume:
    driver: local
    driver_opts:
      type: none
      device: ${STATIC_VOLUME_PATH}
      o: bind
  ollama_data:
    driver: local
    driver_opts:
      type: none
      device: ${OLLAMA_PATH}
      o: bind
  certs_data:
    driver: local
    driver_opts:
      type: none
      device: ${CERTS_PATH}
      o: bind

secrets:
  proxy.ca:
    file: ${CERTS_PATH}/rengine_chain.pem
  proxy.key:
    file: ${CERTS_PATH}/rengine_rsa.key
  proxy.cert:
    file: ${CERTS_PATH}/rengine.pem
